//
//  Tips.swift
//  ProductiveBox
//
//  Created by Lucas Drouot on 13/01/2024.
//

import SwiftUI

struct Tipüêû: View {
    @AppStorage("altIcons") var altIcons: Bool = false
    
    var body: some View {
        HStack {
            Text("  Commande + W pour fermer.")
                .font(.system(size: 12, weight: .medium))
                .foregroundColor(.primary.opacity(0.5))
                .padding(.leading)
        }
        .frame(maxWidth: .infinity, maxHeight: 0, alignment: .leading)
        
        VStack {
                Spacer()
                
                Text("Aide :")
                    .font(.largeTitle)
            if altIcons {
                Image(systemName: "note.text.badge.plus")
                    .font(.title)
            } else {
                Text("Symbole coccinelle üêû\n\n")
                
                VStack {
                    Text("La coccinelle est l√©g√®re, puissante... mais dispers√©e. Une petite note lui sera bien utile.")
                }
            }
                
                VStack {
                    Text("\n\nFonction associ√©e :")
                        .font(.headline)
                    
                    Text(" cr√©ation d'une note rapide")
                }
                
                VStack {
                    Text("\nType d'action :")
                        .font(.headline)
                    Text(" interaction Notes")
                }
            
            Spacer()
            
            Button(action: {}) {
                Image(systemName: "alt")
                    .font(.system(size: 14, weight: .regular))
                    .padding(5)
                Toggle(isOn: $altIcons, label: {})
                    .toggleStyle(.switch)
                    .controlSize(.mini)
            }
            .cornerRadius(50)
            
            Spacer()
        }
        .padding(20)
        .padding(20)
        .frame(minWidth: 350, idealWidth: 350, minHeight: 400, idealHeight: 400)
        
        Rectangle()
            .frame(height: 5)
                            .foregroundColor(.accentColor)
    }
}

struct Tipü¶ã: View {
    @AppStorage("altIcons") var altIcons: Bool = false
    
    var body: some View {
        HStack {
            Text("  Commande + W pour fermer.")
                .font(.system(size: 12, weight: .medium))
                .foregroundColor(.primary.opacity(0.5))
                .padding(.leading)
        }
        .frame(maxWidth: .infinity, maxHeight: 0, alignment: .leading)
        
        VStack {
                Spacer()
                
                Text("Aide :")
                    .font(.largeTitle)
            if altIcons {
                Image(systemName: "rectangle.split.2x1")
                    .font(.title)
            } else {
                Text("Symbole papillon ü¶ã\n\n")
                
                VStack {
                    Text("Le papillon est un insecte gracieux, dot√© d'une particularit√© math√©matique : ses ailes sont sym√©triques.")
                }
            }
                
                VStack {
                    Text("\n\nFonction associ√©e :")
                        .font(.headline)
                    
                    Text(" √©cran scind√©, deux applications simultan√©es")
                }
                
                VStack {
                    Text("\nType d'action :")
                        .font(.headline)
                    Text(" gestion des fen√™tres")
                }
            
            Spacer()
            
            Button(action: {}) {
                Image(systemName: "alt")
                    .font(.system(size: 14, weight: .regular))
                    .padding(5)
                Toggle(isOn: $altIcons, label: {})
                    .toggleStyle(.switch)
                    .controlSize(.mini)
            }
            .cornerRadius(50)
            
                Spacer()
        }
        .padding(20)
        .padding(20)
        .frame(minWidth: 350, idealWidth: 350, minHeight: 400, idealHeight: 400)
        
        Rectangle()
            .frame(height: 5)
                            .foregroundColor(.accentColor)
    }
}

struct Tipüêõ: View {
    @AppStorage("altIcons") var altIcons: Bool = false
    
    var body: some View {
        HStack {
            Text("  Commande + W pour fermer.")
                .font(.system(size: 12, weight: .medium))
                .foregroundColor(.primary.opacity(0.5))
                .padding(.leading)
        }
        .frame(maxWidth: .infinity, maxHeight: 0, alignment: .leading)
        
        VStack {
                Spacer()
                
                Text("Aide :")
                    .font(.largeTitle)
            if altIcons {
                Image(systemName: "camera.badge.ellipsis")
                    .font(.title)
            } else {
                Text("Symbole chenille üêõ\n\n")
                
                VStack {
                    Text("La chenille adore grignoter feuilles et petites plantes. Avant qu'elle ne grignote l'√©cran de votre Mac, effectuez une capture d'√©cran !")
                }
            }
                
                VStack {
                    Text("\n\nFonction associ√©e :")
                        .font(.headline)
                    
                    Text(" capture d'√©cran / enregistrement d'√©cran")
                }
                
                VStack {
                    Text("\nType d'action :")
                        .font(.headline)
                    Text(" services syst√®mes")
                }
            
            Spacer()
            
            Button(action: {}) {
                Image(systemName: "alt")
                    .font(.system(size: 14, weight: .regular))
                    .padding(5)
                Toggle(isOn: $altIcons, label: {})
                    .toggleStyle(.switch)
                    .controlSize(.mini)
            }
            .cornerRadius(50)
            
                Spacer()
        }
        .padding(20)
        .padding(20)
        .frame(minWidth: 350, idealWidth: 350, minHeight: 400, idealHeight: 400)
        
        Rectangle()
            .frame(height: 5)
                            .foregroundColor(.accentColor)
    }
}

struct Tipü™≤: View {
    @AppStorage("altIcons") var altIcons: Bool = false
    
    var body: some View {
        HStack {
            Text("  Commande + W pour fermer.")
                .font(.system(size: 12, weight: .medium))
                .foregroundColor(.primary.opacity(0.5))
                .padding(.leading)
        }
        .frame(maxWidth: .infinity, maxHeight: 0, alignment: .leading)
        
        VStack {
                Spacer()
                
                Text("Aide :")
                    .font(.largeTitle)
            if altIcons {
                Image(systemName: "togglepower")
                    .font(.title)
            } else {
                Text("Symbole scarab√©e ü™≤\n\n")
                
                VStack {
                    Text("Le scarab√©e appr√©cie la tranquilit√©. Il est calme et d√©tendu.")
                    +
                    Text(" Une petite sieste ne me ferait pas de mal.")
                        .italic()
                }
            }
                
                VStack {
                    Text("\n\nFonction associ√©e :")
                        .font(.headline)
                    
                    Text(" gestion de l'activit√© du Mac")
                }
                
                VStack {
                    Text("\nType d'action :")
                        .font(.headline)
                    Text(" service de puissance syst√®me")
                }
            
            Spacer()
            
            Button(action: {}) {
                Image(systemName: "alt")
                    .font(.system(size: 14, weight: .regular))
                    .padding(5)
                Toggle(isOn: $altIcons, label: {})
                    .toggleStyle(.switch)
                    .controlSize(.mini)
            }
            .cornerRadius(50)
            
                Spacer()
        }
        .padding(20)
        .padding(20)
        .frame(minWidth: 350, idealWidth: 350, minHeight: 400, idealHeight: 400)
        
        Rectangle()
            .frame(height: 5)
                            .foregroundColor(.accentColor)
    }
}

struct Tipüêú: View {
    @AppStorage("altIcons") var altIcons: Bool = false
    
    var body: some View {
        HStack {
            Text("  Commande + W pour fermer.")
                .font(.system(size: 12, weight: .medium))
                .foregroundColor(.primary.opacity(0.5))
                .padding(.leading)
        }
        .frame(maxWidth: .infinity, maxHeight: 0, alignment: .leading)
        
        VStack {
                Spacer()
                
                Text("Aide :")
                    .font(.largeTitle)
            if altIcons {
                Image(systemName: "bolt")
                    .font(.title)
            } else {
                Text("Symbole fourmi üêú\n\n")
                
                VStack {
                    Text("La fourmi peut porter plusieurs fois son poids. N√©anmoins, une pause est parfois n√©cessaire.")
                }
            }
                
                VStack {
                    Text("\n\nFonction associ√©e :")
                        .font(.headline)
                    
                    Text(" activer / d√©sactiver le mode d'√âconomie d'√©nergie")
                }
                
                VStack {
                    Text("\nType d'action :")
                        .font(.headline)
                    Text(" service de puissance syst√®me")
                }
            
            Spacer()
            
            Button(action: {}) {
                Image(systemName: "alt")
                    .font(.system(size: 14, weight: .regular))
                    .padding(5)
                Toggle(isOn: $altIcons, label: {})
                    .toggleStyle(.switch)
                    .controlSize(.mini)
            }
            .cornerRadius(50)
            
                Spacer()
        }
        .padding(20)
        .padding(20)
        .frame(minWidth: 350, idealWidth: 350, minHeight: 450, idealHeight: 450)
        
        Rectangle()
            .frame(height: 5)
                            .foregroundColor(.accentColor)
    }
}

struct Tipüê≥: View {
    @AppStorage("altIcons") var altIcons: Bool = false
    
    var body: some View {
        HStack {
            Text("  Commande + W pour fermer.")
                .font(.system(size: 12, weight: .medium))
                .foregroundColor(.primary.opacity(0.5))
                .padding(.leading)
        }
        .frame(maxWidth: .infinity, maxHeight: 0, alignment: .leading)
        
        VStack {
                Spacer()
                
                Text("Aide :")
                    .font(.largeTitle)
            if altIcons {
                Image(systemName: "memorychip")
                    .font(.title)
            } else {
                Text("Symbole baleine üê≥\n\n")
                
                VStack {
                    Text("La baleine est puissante et in√©puisable. Elle prendra soin de votre Mac afin qu'il soit aussi rapide que son jet.")
                }
            }
                
                VStack {
                    Text("\n\nFonction associ√©e :")
                        .font(.headline)
                    
                    Text(" lib√©rer de la RAM")
                }
                
                VStack {
                    Text("\nType d'action :")
                        .font(.headline)
                    Text(" services de maintenance du syst√®me")
                }
            
            Spacer()
            
            Button(action: {}) {
                Image(systemName: "alt")
                    .font(.system(size: 14, weight: .regular))
                    .padding(5)
                Toggle(isOn: $altIcons, label: {})
                    .toggleStyle(.switch)
                    .controlSize(.mini)
            }
            .cornerRadius(50)
            
                Spacer()
        }
        .padding(20)
        .padding(20)
        .frame(minWidth: 350, idealWidth: 350, minHeight: 400, idealHeight: 400)
        
        Rectangle()
            .frame(height: 5)
                            .foregroundColor(.accentColor)
    }
}

struct Tipü¶ä: View {
    @AppStorage("altIcons") var altIcons: Bool = false
    
    var body: some View {
        HStack {
            Text("  Commande + W pour fermer.")
                .font(.system(size: 12, weight: .medium))
                .foregroundColor(.primary.opacity(0.5))
                .padding(.leading)
        }
        .frame(maxWidth: .infinity, maxHeight: 0, alignment: .leading)
        
        VStack {
                Spacer()
                
                Text("Aide :")
                    .font(.largeTitle)
            if altIcons {
                Image(systemName: "menubar.dock.rectangle")
                    .font(.title)
            } else {
                Text("Symbole renard ü¶ä\n\n")
                
                VStack {
                    Text("Le renard est rus√©. Se fondre dans le d√©cor est pour lui d'une facilit√© divine.")
                }
            }
                
                VStack {
                    Text("\n\nFonction associ√©e :")
                        .font(.headline)
                    
                    Text(" afficher le Bureau / retour aux fen√™tres")
                }
                
                VStack {
                    Text("\nType d'action :")
                        .font(.headline)
                    Text(" gestion des fen√™tres")
                }
            
            Spacer()
            
            Button(action: {}) {
                Image(systemName: "alt")
                    .font(.system(size: 14, weight: .regular))
                    .padding(5)
                Toggle(isOn: $altIcons, label: {})
                    .toggleStyle(.switch)
                    .controlSize(.mini)
            }
            .cornerRadius(50)
            
                Spacer()
        }
        .padding(20)
        .padding(20)
        .frame(minWidth: 350, idealWidth: 350, minHeight: 400, idealHeight: 400)
        
        Rectangle()
            .frame(height: 5)
                            .foregroundColor(.accentColor)
    }
}
